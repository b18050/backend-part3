{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","personid","console","log","url","request","delete","window","confirm","id","put","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filterName","setFilterName","errorMessage","setErrorMessage","useEffect","personService","initialPersons","catch","error","alert","addName","event","preventDefault","nameObject","name","number","filter","person","length","returnedPerson","concat","setTimeout","contact","x","map","handleNameChange","target","value","handleNumberChange","FilterName","filter_persons","toUpperCase","indexOf","Contact","key","deletePerson","Notification","message","className","onClick","PersonForm","onSubmit","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dcc81e4e.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getPersons = () => {\r\n\tconst request = axios.get(baseUrl)\r\n\treturn request.then(response => response.data)\r\n} \r\n\r\nconst create = newObject => {\r\n\tconst request = axios.post(baseUrl, newObject)\r\n\treturn request.then(response => response.data)\r\n}\r\n\r\nconst erase = (personid) => {\r\n\tconsole.log(personid)\r\n\tconst url = `${baseUrl}/${personid}`\r\n\tconst request = axios.delete(url)\r\n\tif (window.confirm(\"Do you really want it to delete \")) {\r\n\t\treturn request.then(response => response.data)\r\n    }\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n\tconsole.log(newObject)\r\n\tconst url = `${baseUrl}/${id}`\r\n\tconst request = axios.put(url, newObject) \r\n\treturn request.then(response => response.data)\r\n\r\n}\r\n\r\nexport default { getPersons , create, erase , update }","import React, { useState, useEffect } from 'react'\nimport './index.css'\nimport personService from './services/persons'\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName ] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [filterName, setFilterName] = useState('')\n  const [errorMessage, setErrorMessage] = useState('')\n\n    useEffect(() => {\n        personService\n            .getPersons()\n            .then(initialPersons => {\n                console.log(initialPersons)\n                setPersons(initialPersons)\n            })\n            .catch(error => {\n                alert('the server is not running, please run >>npx json-server --port 3001 --watch db.json'\n                 )\n            })\n  },[])\n  \n  const addName = (event) => {\n    event.preventDefault()\n   \n    const nameObject = {\n      name: newName,\n       number: newNumber\n\n    }\n\n      if(!persons.filter(\n          person=>person.name===newName)\n          .length>0) {\n\n          personService\n              .create(nameObject)\n              .then(returnedPerson => {\n                  setPersons(persons.concat(returnedPerson))\n                  setNewName('')\n                  setNewNumber('')\n                  console.log(persons)\n                  setErrorMessage(`Added ${newName} to the list`)\n                  setTimeout(() => {\n                      setErrorMessage('')\n                    },5000)\n              }) \n              .catch(error => {\n                // this is the way to access the error message\n                console.log(error.response.data) \n                setErrorMessage(`Person validation failed name: Path ${newName} is shorter than the minimum allowed length(3) or number: ${newNumber} is shorter than minimum allowed length(8) `)\n                setTimeout(() => {\n                      setErrorMessage('')\n                    },5000)\n              })\n\n        \n      }\n      else {\n          if (window.confirm(`${newName} is already added to phonebook\nDo you want to replace it?`)) {\n              console.log(persons)\n              \n              const contact = persons.filter(x => x.name===newName)\n              console.log(contact[0].id)\n              const id = contact[0].id\n              personService\n                  .update(id, nameObject)\n                  .then(returnedPerson => {\n                      setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\n                      setNewName('')\n                      setNewNumber('')\n                      setErrorMessage(`updated number of '${newName}' with '${newNumber}' to the list`)\n                      setTimeout(() => {\n                        setErrorMessage('')\n                      },5000)\n                  })\n                  .catch(error => {\n                    setErrorMessage(\n                      `Person '${id}' was already removed from the server`\n                      )\n                    setTimeout(() => {\n                      setErrorMessage('')\n                    },5000)\n                    setPersons(persons.filter(x=>x.id !== id))\n                  })\n              \n          }\n\n      }\n  }\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterNameChange = (event) => {\n    console.log(event.target.value)\n    setFilterName(event.target.value)\n  }\n\n  const FilterName = ({persons}) => {\n    console.log(persons)\n    const filter_persons=persons.filter(function(person){\n      return(person.name.toUpperCase().indexOf(filterName.toUpperCase()) > -1)\n    });\n    console.log(filter_persons)\n    return(<>\n        {filter_persons.map((person) => <Contact person={person} key={person.name} deletePerson={() => deletePerson(person.id)} />)} \n      </>)\n  }\n\n    const deletePerson = (personid) => {\n        console.log(personid)\n        console.log(\"person want to be deleted\")\n        personService\n            .erase(personid)\n            .then(returnedPerson => {\n                console.log(returnedPerson)\n                setPersons(persons.filter(person => person.id !== personid))\n            })\n            .catch(error => {\n              setErrorMessage(\n              `Person with '${personid} ' was already deleted from server`\n              )\n              setTimeout(() => {\n                setErrorMessage('')\n              },5000)  \n            })\n               \n\n    }\n\n    const Notification = ({message}) => {\n      console.log(message)\n      if(message === '') {\n        return (null)\n      }\n      return (\n        <div className=\"error\">\n            {message}\n        </div>\n      )\n    }\n\n    const Contact = ({ person, deletePerson }) => {\n      const label = 'erase'\n  return (\n      <p>{person.name} {person.number }\n          <button onClick={deletePerson}> {label}\n          </button>\n              </p>\n    )\n  }\n\n  const PersonForm = () => {\n    return(\n    <>\n    <form onSubmit={addName}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange} /></div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </>)\n    \n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} />\n      <p> filter shown with <input value={filterName} onChange={handleFilterNameChange}/> </p>\n      <h2> add a new </h2>\n      <PersonForm />\n      <h2>Numbers</h2>\n      <FilterName persons={persons} /> \n      \n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\n\n\n\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n\n"],"sourceRoot":""}